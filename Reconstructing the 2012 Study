# This code reconstructs the 2012 analysis by A.R. Vannatta, R.H. Hauer, and N.M. Schuettpelz (https://doi-org.myaccess.library.utoronto.ca/10.1603/EC11130)

import math
import matplotlib.pyplot as plt
import numpy as np

# CTLA value calculation functions
def calculate_ash_ctla_value(dbh, replacement_cost, condition_rating, location_factor, species_rating):
    return (math.pi * ((dbh / 2) ** 2)) * replacement_cost * condition_rating * location_factor * species_rating

def calculate_nonash_ctla_value(dbh, replacement_cost, condition_rating, location_factor, species_rating):
    return (math.pi * ((dbh / 2) ** 2)) * replacement_cost * condition_rating * location_factor * species_rating

# CTLA Parameters for Ash and Non-Ash Trees
replacement_cost_per_cm_ash = 4.93
condition_rating_ash = 0.75
location_factor_ash = 0.7
species_rating_ash = 0.7

replacement_cost_per_cm_nonash = 4.93
condition_rating_nonash = 0.75
location_factor_nonash = 0.7
species_rating_nonash = 0.7

# Shared Parameters
years = 20
starting_ash_trees = 155
background_mortality_rate = 0.02  # Background mortality rate for ash trees
starting_diameter = 20.6 # Starting ash diameter in cm
growth_rate = 1.01  # Growth rate of ash in cm

# Replanting Data
starting_diameter_new = 2.5 # Starting diameter of replanted trees in cm
growth_rate_new = 2.01  # Growth rate of replanted trees in cm
new_tree_mortality_rate = 0.02 # Mortality rate of replanted trees

# Parameters specific to Control simulation
replant_per_year_control = 0
stage2_start_year_control = 1 # Starting year of EAB invasion
stage3_start_year_control = 7 # Starting year of EAB Surge
Rn_control = 0.98 # Normal ash survival rate without EAB present
Rs_control = 0.80 # Ash survival rate after tipping point with EAB present
Na_control = 0.02 # Normal ash mortality rate without EAB present

# Parameters specific to Removal and Replant simulation
removal_start_year = 1  # Year to start removals
replant_start_year = 1  # Year to start replanting
stage4_start_year = 6 # Year when replanting is no longer conducted
removal_percentage = 0.20 # Percentage of starting ash trees removed preemptively each year

# Parameters specific to insecticide simulation
eab_mortality_rate = 0.01  # Mortality rate due to EAB
stage2_start_year = 1  # Year EAB starts impacting trees
stage3_start_year = 7  # Year EAB surge starts

# Management costs
removal_cost_per_cm = 3.94 # Removal cost ($) per cm DBH
maintenance_cost_per_cm = 1.27 # Removal cost ($) per cm DBH
tree_planting_cost = 300 # Planting and establishment cost ($) per each new tree for that year
insecticide_cost_per_cm = 5.51 # Insecticide cost ($) (bi-annual) per cm DBH

# Simulation for Control (No Intervention)
def simulate_control(years, starting_ash_trees, replant_per_year, stage2_start_year, stage3_start_year, Rn_control, Rs_control, Na_control, starting_diameter, growth_rate):
    # Initialize variables
    remaining_ash_trees = starting_ash_trees
    cumulative_mortality = 0
    cumulative_replanted = 0
    current_diameter = starting_diameter
    initial_ctla_value = calculate_ash_ctla_value(starting_diameter, replacement_cost_per_cm_ash, condition_rating_ash,
                                                  location_factor_ash, species_rating_ash) * starting_ash_trees
    ctla_values_control = []  # List to store CTLA values
    ctla_values_control.append(initial_ctla_value)
    total_management_cost = 0

    # Lists for plotting
    years_x = [0]  # Include year 0
    remaining_ash_trees_y = [starting_ash_trees]
    cumulative_basal_area_y = [np.pi * (starting_diameter / 2)**2 * starting_ash_trees]  # Initial basal area
    annual_management_cost_y = [0]

    for year in range(1, years + 1):
        # Add year to x-axis list
        years_x.append(year)

        # Update diameter for this year
        current_diameter += growth_rate

        if year < stage2_start_year:
            # Stage 1 (Pre-EAB)
            mortality_rate = Na_control
        elif year < stage3_start_year:
            # Stage 2 (EAB Arrived)
            Yn = year - stage2_start_year
            mortality_rate = ((Rn_control - Rs_control) / (1 + math.exp(4 - Yn))) + Na_control
        else:
            # Stage 3 (EAB Surge)
            mortality_rate = 1 - Rs_control

        # Calculate annual mortality and removal costs
        annual_mortality = round(remaining_ash_trees * mortality_rate)
        remaining_ash_trees -= annual_mortality
        cumulative_mortality += annual_mortality

        # Calculate maintenance costs for surviving trees
        maintenance_cost = remaining_ash_trees * current_diameter * maintenance_cost_per_cm
        removal_cost = annual_mortality * current_diameter * removal_cost_per_cm

        # Calculate basal area
        basal_area = np.pi * (current_diameter / 2)**2 * remaining_ash_trees
        remaining_ash_trees_y.append(remaining_ash_trees)
        cumulative_basal_area_y.append(basal_area)

        # Calculate CTLA value for the remaining ash trees
        ctla_value = calculate_ash_ctla_value(current_diameter, replacement_cost_per_cm_ash, condition_rating_ash, location_factor_ash, species_rating_ash)*remaining_ash_trees
        ctla_values_control.append(ctla_value)

        # Update total management cost
        annual_management_cost = removal_cost + maintenance_cost
        total_management_cost += annual_management_cost
        annual_management_cost_y.append(annual_management_cost)
        net_values = ctla_value - annual_management_cost

        # Print yearly report
        total_trees = round(remaining_ash_trees + cumulative_replanted)
        print(f"Year {year}:")
        print(f"  - Tree Mortality: {annual_mortality}")
        print(f"  - Removal Cost: {removal_cost}")
        print(f"  - Maintenance Cost: {maintenance_cost}")
        print(f"  - Total Management Cost: {total_management_cost}")
        print(f"  - Cumulative Mortality: {cumulative_mortality}")
        print(f"  - Remaining Ash Trees: {remaining_ash_trees}")
        print(f"  - Replanted Trees This Year: {replant_per_year}")
        print(f"  - Cumulative Replanted Trees: {cumulative_replanted}")
        print(f"  - Total Trees: {total_trees}\n")

    return years_x, remaining_ash_trees_y, cumulative_basal_area_y, ctla_values_control, annual_management_cost_y, net_values

# Simulation for Removal and Replant
def simulate_removal_replant(years, starting_ash_trees, background_mortality_rate, new_tree_mortality_rate, removal_start_year, replant_start_year, stage4_start_year, removal_percentage, starting_diameter, growth_rate, starting_diameter_new, growth_rate_new, removal_cost_per_cm, tree_planting_cost, maintenance_cost_per_cm):
    # Initialize variables
    remaining_ash_trees = starting_ash_trees
    new_trees = 0
    current_diameter = starting_diameter
    current_diameter_new = starting_diameter_new
    initial_ctla_value_ash = calculate_ash_ctla_value(current_diameter, replacement_cost_per_cm_ash, condition_rating_ash, location_factor_ash, species_rating_ash) * remaining_ash_trees
    initial_ctla_value_new = calculate_nonash_ctla_value(current_diameter_new, replacement_cost_per_cm_nonash, condition_rating_nonash, location_factor_nonash, species_rating_nonash) * new_trees
    ctla_values_ash = [initial_ctla_value_ash]
    ctla_values_new = [initial_ctla_value_new]
    total_management_cost = 0
    ash_tree_mortality = 0
    net_value = initial_ctla_value_new + initial_ctla_value_ash

    # Calculate the number of trees to preemptively remove and replant each year
    trees_to_remove_annually = round(starting_ash_trees * removal_percentage)
    trees_to_replant_annually = round(starting_ash_trees * removal_percentage)

    # Lists for plotting
    years_x = [0]  # Include year 0
    remaining_ash_trees_y = [starting_ash_trees]
    total_trees_y = [starting_ash_trees]
    cumulative_basal_area_ash_y = [np.pi * (starting_diameter / 2)**2 * starting_ash_trees]
    cumulative_basal_area_new_y = [0]
    annual_management_cost_y = [0]
    net_value = []

    for year in range(1, years + 1):
        # Apply background mortality rate for ash trees in Stage 1 and Stage 4
        if year < removal_start_year or year >= stage4_start_year:
            ash_tree_mortality = round(remaining_ash_trees * background_mortality_rate)
            remaining_ash_trees = max(remaining_ash_trees - ash_tree_mortality, 0)

        # Apply removals and replanting in Stage 2 and Stage 3
        if year >= removal_start_year and year < stage4_start_year:
            removed_this_year = min(trees_to_remove_annually, remaining_ash_trees)
            removal_cost = removed_this_year * current_diameter * removal_cost_per_cm
            remaining_ash_trees -= removed_this_year
            new_trees_planted = min(trees_to_replant_annually, starting_ash_trees - remaining_ash_trees)
            tree_planting_cost_total = new_trees_planted * tree_planting_cost
            new_trees += new_trees_planted

        # Calculate maintenance costs for both remaining ash and new trees
        ash_tree_maintenance_cost = remaining_ash_trees * current_diameter * maintenance_cost_per_cm
        new_tree_maintenance_cost = new_trees * current_diameter_new * maintenance_cost_per_cm
        total_maintenance_cost = ash_tree_maintenance_cost + new_tree_maintenance_cost

        # Update total management cost
        annual_management_cost = removal_cost + tree_planting_cost_total + total_maintenance_cost
        total_management_cost += annual_management_cost
        annual_management_cost_y.append(annual_management_cost)

        # Apply mortality rate to new trees in all stages after replanting starts
        new_tree_mortality = round(new_trees * new_tree_mortality_rate)
        new_trees = max(new_trees - new_tree_mortality, 0)

        # Update diameter and calculate basal area for ash trees
        current_diameter += growth_rate
        basal_area_ash = np.pi * (current_diameter / 2)**2 * remaining_ash_trees
        cumulative_basal_area_ash_y.append(basal_area_ash)

        # Update diameter and calculate basal area for new trees
        current_diameter_new += growth_rate_new
        basal_area_new = np.pi * (current_diameter_new / 2)**2 * new_trees
        cumulative_basal_area_new_y.append(basal_area_new)

        # Calculate CTLA values for the remaining ash trees, new trees, and all trees
        ctla_value_ash = calculate_ash_ctla_value(current_diameter, replacement_cost_per_cm_ash, condition_rating_ash, location_factor_ash, species_rating_ash)*remaining_ash_trees
        ctla_values_ash.append(ctla_value_ash)
        ctla_value_new = calculate_nonash_ctla_value(current_diameter_new, replacement_cost_per_cm_nonash,
                                                     condition_rating_nonash, location_factor_nonash,
                                                     species_rating_nonash) * new_trees
        ctla_values_new.append(ctla_value_new)
        combined_ctla_values_removal = [ash + new for ash, new in zip(ctla_values_ash, ctla_values_new)]
        net_value = combined_ctla_values_removal -  annual_management_cost_y

        # Record the year and the number of remaining trees
        years_x.append(year)
        remaining_ash_trees_y.append(remaining_ash_trees)
        total_trees_y.append(remaining_ash_trees + new_trees)
        
        # Print yearly report
        print(f"Year {year}:")
        print(f"  - Remaining Ash Trees: {remaining_ash_trees}")
        print(f"  - New Trees (Different Species): {new_trees}")
        print(f"  - Total Trees (Ash + New): {remaining_ash_trees + new_trees}")
        print(f"  - Ash Tree Mortality This Year: {ash_tree_mortality}")
        print(f"  - New Tree Mortality This Year: {new_tree_mortality}")
        print(f"  - Removed Ash Trees This Year: {removed_this_year if year >= removal_start_year and year < stage4_start_year else 0}")
        print(f"  - Trees Planted This Year: {new_trees if year >= replant_start_year and year < stage4_start_year else 0}")
        print(f"  - Removal Cost This Year: ${removal_cost if year >= removal_start_year and year < stage4_start_year else 0:.2f}")
        print(f"  - Planting Cost This Year: ${tree_planting_cost_total if year >= replant_start_year and year < stage4_start_year else 0:.2f}")
        print(f"  - Maintenance Cost This Year: ${total_maintenance_cost:.2f}")
        print(f"  - Total Annual Management Cost: ${annual_management_cost:.2f}")
        print(f"  - Cumulative Management Cost: ${total_management_cost:.2f}\n")

    return (years_x, remaining_ash_trees_y, total_trees_y, cumulative_basal_area_ash_y, cumulative_basal_area_new_y,
            combined_ctla_values_removal, annual_management_cost_y, total_management_cost, net_value)

# Simulation for injections
def simulate_ash_trees_with_insecticide(years, starting_ash_trees, background_mortality_rate, eab_mortality_rate, stage2_start_year, stage3_start_year, starting_diameter, growth_rate):
    # Initialize variables
    remaining_ash_trees = starting_ash_trees
    current_diameter = starting_diameter
    initial_ctla_value = calculate_ash_ctla_value(starting_diameter, replacement_cost_per_cm_ash, condition_rating_ash,
                                                  location_factor_ash, species_rating_ash) * starting_ash_trees
    ctla_values_injection = []  # List to store CTLA values for ash trees
    ctla_values_injection.append(initial_ctla_value)
    total_management_cost = 0

    # Lists for plotting
    years_x = [0]  # Include year 0
    remaining_ash_trees_y = [starting_ash_trees]
    cumulative_basal_area_y = [np.pi * (starting_diameter / 2)**2 * starting_ash_trees]
    annual_management_cost_y = [0]
    net_value = []

    for year in range(1, years + 1):
        # Stage 1 and 2: Background mortality rate for ash trees
        if year < stage3_start_year:
            mortality = round(remaining_ash_trees * background_mortality_rate)
        # Stage 3: EAB surge with additional mortality
        else:
            mortality = round(remaining_ash_trees * eab_mortality_rate) + round(remaining_ash_trees * background_mortality_rate)

        remaining_ash_trees = max(remaining_ash_trees - mortality, 0)

        # Update diameter and calculate basal area
        current_diameter += growth_rate
        basal_area = np.pi * (current_diameter / 2)**2 * remaining_ash_trees

        # Calculate CTLA value for the remaining ash trees
        ctla_value = calculate_ash_ctla_value(current_diameter, replacement_cost_per_cm_ash, condition_rating_ash, location_factor_ash, species_rating_ash)*remaining_ash_trees
        ctla_values_injection.append(ctla_value)

        # Calculate costs
        removal_cost = mortality * current_diameter * removal_cost_per_cm
        maintenance_cost = remaining_ash_trees * current_diameter * maintenance_cost_per_cm
        insecticide_cost = (remaining_ash_trees * current_diameter * insecticide_cost_per_cm) if year % 2 == 0 else 0  # Assuming bi-annual treatment

        # Update total management cost
        annual_management_cost = removal_cost + maintenance_cost + insecticide_cost
        total_management_cost += annual_management_cost
        annual_management_cost_y.append(annual_management_cost)

        # Calculate the net value for this year
        net_value_for_year = ctla_values_injection[-1] - annual_management_cost
        net_value.append(net_value_for_year)

        # Record the year and the number of remaining trees
        years_x.append(year)
        remaining_ash_trees_y.append(remaining_ash_trees)
        cumulative_basal_area_y.append(basal_area)

        # Print yearly report
        print(f"Year {year}:")
        print(f"  - Remaining Ash Trees: {remaining_ash_trees}")
        print(f"  - Tree Mortality: {mortality}")
        print(f"  - Removal Cost: ${removal_cost:.2f}")
        print(f"  - Maintenance Cost: ${maintenance_cost:.2f}")
        print(f"  - Insecticide Cost: ${insecticide_cost:.2f}")
        print(f"  - Total Annual Management Cost: ${annual_management_cost:.2f}")
        print(f"  - Cumulative Management Cost: ${total_management_cost:.2f}\n")

    return years_x, remaining_ash_trees_y, cumulative_basal_area_y, ctla_values_injection, annual_management_cost_y, net_value

# Simulation for no EAB
def simulate_ash_trees_basic(years, starting_ash_trees, background_mortality_rate, starting_diameter, growth_rate):
    # Initialize variables
    remaining_ash_trees = starting_ash_trees
    current_diameter = starting_diameter
    initial_ctla_value = calculate_ash_ctla_value(starting_diameter, replacement_cost_per_cm_ash, condition_rating_ash,
                                                  location_factor_ash, species_rating_ash) * starting_ash_trees
    ctla_values_basic = []  # List to store CTLA values
    ctla_values_basic.append(initial_ctla_value)
    total_management_cost = 0

    # Lists for plotting
    years_x = [0]  # Include year 0
    remaining_ash_trees_y = [starting_ash_trees]
    cumulative_basal_area_y = [np.pi * (starting_diameter / 2)**2 * starting_ash_trees]
    annual_management_cost_y = [0]  # Initial management cost

    for year in range(1, years + 1):
        # Apply background mortality rate for ash trees
        mortality = round(remaining_ash_trees * background_mortality_rate)
        removal_cost = mortality * current_diameter * removal_cost_per_cm
        remaining_ash_trees = max(remaining_ash_trees - mortality, 0)

        # Update diameter and calculate basal area
        current_diameter += growth_rate
        basal_area = np.pi * (current_diameter / 2)**2 * remaining_ash_trees

        # Calculate CTLA value for the remaining ash trees
        ctla_value = calculate_ash_ctla_value(current_diameter, replacement_cost_per_cm_ash, condition_rating_ash, location_factor_ash, species_rating_ash)*remaining_ash_trees
        ctla_values_basic.append(ctla_value)

        # Calculate maintenance cost for surviving trees
        maintenance_cost = remaining_ash_trees * current_diameter * maintenance_cost_per_cm

        # Update total management cost
        annual_management_cost = removal_cost + maintenance_cost
        total_management_cost += annual_management_cost
        annual_management_cost_y.append(annual_management_cost)

        # Record the year, number of remaining trees, and cumulative basal area
        years_x.append(year)
        remaining_ash_trees_y.append(remaining_ash_trees)
        cumulative_basal_area_y.append(basal_area)

        # Print yearly report
        print(f"Year {year}:")
        print(f"  - Remaining Ash Trees: {remaining_ash_trees}")
        print(f"  - Tree Mortality: {mortality}")
        print(f"  - Removal Cost: ${removal_cost:.2f}")
        print(f"  - Maintenance Cost: ${maintenance_cost:.2f}")
        print(f"  - Total Annual Management Cost: ${annual_management_cost:.2f}")
        print(f"  - Cumulative Management Cost: ${total_management_cost:.2f}\n")

    return years_x, remaining_ash_trees_y, cumulative_basal_area_y, ctla_values_basic, annual_management_cost_y

# Run simulations and get data for plotting
years_x_control, remaining_trees_y_control, cumulative_basal_area_y_control, ctla_values_control, annual_management_cost_control = simulate_control(years, starting_ash_trees, replant_per_year_control, stage2_start_year_control, stage3_start_year_control, Rn_control, Rs_control, Na_control, starting_diameter, growth_rate)
years_x_removal, remaining_ash_trees_y_removal, total_trees_y_removal, cumulative_basal_area_ash_y_removal, cumulative_basal_area_new_y_removal, ctla_values_removal, annual_management_cost_y_removal, total_management_cost_removal = simulate_removal_replant(years, starting_ash_trees, background_mortality_rate, new_tree_mortality_rate, removal_start_year, replant_start_year, stage4_start_year, removal_percentage, starting_diameter, growth_rate, starting_diameter_new, growth_rate_new, removal_cost_per_cm, tree_planting_cost, maintenance_cost_per_cm)
years_x_no_eab, remaining_trees_y_no_eab, cumulative_basal_area_y_no_eab, ctla_values_basic, annual_management_cost_no_eab = simulate_ash_trees_basic(years, starting_ash_trees, background_mortality_rate, starting_diameter, growth_rate)
years_x_injection, remaining_trees_y_injection, cumulative_basal_area_y_injection, ctla_values_injection, annual_management_cost_injection = simulate_ash_trees_with_insecticide(years, starting_ash_trees, background_mortality_rate, eab_mortality_rate, stage2_start_year, stage3_start_year, starting_diameter, growth_rate)

# Plotting the number of trees
plt.figure(figsize=(10, 6))
plt.plot(years_x_no_eab, remaining_trees_y_no_eab, marker='s', linestyle='-', color='purple', label='No EAB')
plt.plot(years_x_control, remaining_trees_y_control, marker='o', linestyle='-', color='b', label='Control')
plt.plot(years_x_removal, remaining_ash_trees_y_removal, marker='x', linestyle='-', color='r', label='Removal and Replant: Ash Trees')
plt.plot(years_x_removal, total_trees_y_removal, marker='^', linestyle='-', color='g', label='Removal and Replant: Total Trees')
plt.plot(years_x_injection, remaining_trees_y_injection, marker='d', linestyle='-', color='orange', label='Injection')
plt.title('Number of Trees over Time')
plt.xlabel('Year')
plt.ylabel('Number of Trees')
plt.legend()
plt.grid(True)
plt.show()

# Plotting cumulative basal area
plt.figure(figsize=(10, 6))
plt.plot(years_x_no_eab, cumulative_basal_area_y_no_eab, marker='s', linestyle='-', color='m', label='No EAB')
plt.plot(years_x_control, cumulative_basal_area_y_control, marker='o', linestyle='-', color='b', label='Control')
plt.plot(years_x_removal, cumulative_basal_area_ash_y_removal, marker='x', linestyle='-', color='r', label='Removal and Replant: Ash Trees')
plt.plot(years_x_removal, cumulative_basal_area_new_y_removal, marker='^', linestyle='-', color='g', label='Removal and Replant: New Trees')
plt.plot(years_x_injection, cumulative_basal_area_y_injection, marker='*', linestyle = '-', color='b', label = 'Injection')
plt.title('Cumulative Basal Area over Time')
plt.xlabel('Year')
plt.ylabel('Basal Area (sq cm)')
plt.legend()
plt.grid(True)
plt.show()

# Plotting CTLA values for each simulation
plt.figure(figsize=(12, 8))
plt.plot(years_x_no_eab, ctla_values_basic, label='No EAB', marker='^', linestyle='-.')
plt.plot(years_x_control, ctla_values_control, label='Control', marker='o', linestyle='-')
plt.plot(years_x_removal, ctla_values_removal, label='Removal and Replant', marker='x', linestyle='--')
plt.plot(years_x_injection, ctla_values_injection, label='Injection', marker='s', linestyle=':')
plt.title('Value of Trees')
plt.xlabel('Year')
plt.ylabel('CTLA Value ($)')
plt.legend()
plt.grid(True)
plt.show()

# Plot management costs
plt.figure(figsize=(12, 8))
plt.plot(years_x_no_eab, annual_management_cost_no_eab, label='No EAB', marker='s', linestyle=':')
plt.plot(years_x_control, annual_management_cost_control, label='Control', marker='o', linestyle='-')
plt.plot(years_x_removal, annual_management_cost_y_removal, label='Removal and Replant', marker='^', linestyle='-.')
plt.plot(years_x_injection, annual_management_cost_injection, label='Injection', marker='^', linestyle='-.')
plt.title('Annual Management Costs Over Time for Different Management Strategies')
plt.xlabel('Year')
plt.ylabel('Annual Management Cost ($)')
plt.legend()
plt.grid(True)
plt.show()

# Plot cumulative management costs
plt.figure(figsize=(12, 8))
# Cumulative costs can be calculated by using a cumulative sum function, np.cumsum, on the annual costs
plt.plot(years_x_no_eab, np.cumsum(annual_management_cost_no_eab), label='No EAB', marker='s', linestyle=':')
plt.plot(years_x_control, np.cumsum(annual_management_cost_control), label='Control', marker='o', linestyle='-')
plt.plot(years_x_removal, np.cumsum(annual_management_cost_y_removal), label='Removal and Replant', marker='x', linestyle='--')
plt.plot(years_x_injection, np.cumsum(annual_management_cost_injection), label='Injection', marker='^', linestyle='-.')
plt.title('Cumulative Management Costs Over Time for Different Management Strategies')
plt.xlabel('Year')
plt.ylabel('Cumulative Management Cost ($)')
plt.legend()
plt.grid(True)
plt.show()

# Plotting the net CTLA value over time for each strategy

plt.figure(figsize=(12, 8))
plt.plot(years_x_no_eab, net_value_no_eab, label='No EAB', marker='s', linestyle=':')
plt.plot(years_x_control, net_value_control, label='Control', marker='o', linestyle='-')
plt.plot(years_x_removal, net_value_removal, label='Removal and Replant', marker='x', linestyle='--')
plt.plot(years_x_injection, net_value_injection, label='Injection', marker='^', linestyle='-.')
plt.title('Net CTLA Value Over Time for Different Management Strategies')
plt.xlabel('Year')
plt.ylabel('Net CTLA Value ($)')
plt.legend()
plt.grid(True)
plt.show()
